#!/usr/bin/env python3
"""
Generate a clean summary report of duplicate words in the French Gender Swipe JSON file.
"""

import json
from collections import Counter, defaultdict

def generate_summary_report():
    """Generate a clean summary report of duplicate words."""
    
    # Load the JSON data
    with open('public/words.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    # Extract words and count frequencies
    words = [entry['word'] for entry in data]
    word_counts = Counter(words)
    
    # Find duplicates
    duplicates = {word: count for word, count in word_counts.items() if count > 1}
    
    # Group entries by word for detailed analysis
    word_groups = defaultdict(list)
    for i, entry in enumerate(data):
        word_groups[entry['word']].append((i, entry))
    
    # Sort by frequency (descending) and then alphabetically
    sorted_duplicates = sorted(duplicates.items(), key=lambda x: (-x[1], x[0]))
    
    print("# Duplicate Words Analysis Report")
    print("## French Gender Swipe Game - public/words.json")
    print()
    print("### Summary")
    print(f"- **Total entries in file**: {len(data)}")
    print(f"- **Unique words**: {len(word_counts)}")
    print(f"- **Words appearing more than once**: {len(duplicates)}")
    print(f"- **Total duplicate occurrences**: {sum(duplicates.values())}")
    print(f"- **Excess duplicate entries**: {sum(count - 1 for count in duplicates.values())}")
    print()
    
    # Frequency distribution
    frequency_counts = defaultdict(int)
    for word, count in duplicates.items():
        frequency_counts[count] += 1
    
    print("### Frequency Distribution")
    for freq in sorted(frequency_counts.keys(), reverse=True):
        count = frequency_counts[freq]
        print(f"- Words appearing **{freq} times**: {count}")
    print()
    
    # Top duplicates
    print("### Top 10 Most Repeated Words")
    print("| Word | Frequency | Gender | Translation |")
    print("|------|-----------|--------|-------------|")
    
    for word, freq in sorted_duplicates[:10]:
        # Get the first occurrence for gender and translation
        first_entry = word_groups[word][0][1]
        gender = first_entry['gender']
        translation = first_entry['translation']
        
        # Check if all entries are identical
        all_identical = all(entry == first_entry for _, entry in word_groups[word])
        consistency_mark = "✅" if all_identical else "⚠️"
        
        print(f"| {word} | {freq} | {gender} | {translation} {consistency_mark} |")
    
    print()
    
    # Complete list
    print("### Complete List of Duplicate Words")
    print("| Word | Frequency | Gender | Translation | Status |")
    print("|------|-----------|--------|-------------|---------|")
    
    for word, freq in sorted_duplicates:
        # Get the first occurrence for gender and translation
        first_entry = word_groups[word][0][1]
        gender = first_entry['gender']
        translation = first_entry['translation']
        
        # Check if all entries are identical
        all_identical = all(entry == first_entry for _, entry in word_groups[word])
        status = "Consistent" if all_identical else "Has variations"
        
        print(f"| {word} | {freq} | {gender} | {translation} | {status} |")
    
    print()
    
    # Find words with inconsistencies
    inconsistent_words = []
    for word, entries in word_groups.items():
        if len(entries) > 1:
            first_entry = entries[0][1]
            for _, entry in entries[1:]:
                if entry['gender'] != first_entry['gender'] or entry['translation'] != first_entry['translation']:
                    inconsistent_words.append(word)
                    break
    
    if inconsistent_words:
        print("### Words with Inconsistent Gender/Translation")
        print("The following words have variations in their gender or translation:")
        print()
        for word in sorted(inconsistent_words):
            print(f"- **{word}**")
            entries = word_groups[word]
            seen_variants = set()
            for pos, entry in entries:
                variant = f"{entry['gender']} - {entry['translation']}"
                if variant not in seen_variants:
                    seen_variants.add(variant)
                    print(f"  - {variant}")
            print()
    
    print("---")
    print("*Report generated by analyze_duplicates.py*")
    
    return duplicates

if __name__ == "__main__":
    generate_summary_report()